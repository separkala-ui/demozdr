version: '3.8'

services:
  # PHP-FPM Application
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        PHP_VERSION: 8.4
    container_name: zdr_app
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - ./docker/php/php.ini:/usr/local/etc/php/conf.d/custom.ini
    environment:
      - APP_ENV=${APP_ENV:-local}
      - APP_DEBUG=${APP_DEBUG:-true}
      - DB_HOST=db
      - DB_DATABASE=${DB_DATABASE:-zdr_database}
      - DB_USERNAME=${DB_USERNAME:-zdr_user}
      - DB_PASSWORD=${DB_PASSWORD:-zdr_password}
      - REDIS_HOST=redis
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
    networks:
      - zdr_network
    depends_on:
      - db
      - redis

  # Nginx Web Server
  nginx:
    image: nginx:alpine
    container_name: zdr_nginx
    restart: unless-stopped
    ports:
      - "${APP_PORT:-80}:80"
      - "${APP_SSL_PORT:-443}:443"
    volumes:
      - ./:/var/www
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./storage/logs/nginx:/var/log/nginx
    networks:
      - zdr_network
    depends_on:
      - app

  # MySQL Database
  db:
    image: mariadb:10.11
    container_name: zdr_db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE:-zdr_database}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root_password}
      MYSQL_USER: ${DB_USERNAME:-zdr_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-zdr_password}
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - zdr_dbdata:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/custom.cnf
    networks:
      - zdr_network
    command: --default-authentication-plugin=mysql_native_password

  # Redis Cache & Queue
  redis:
    image: redis:alpine
    container_name: zdr_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - zdr_redis:/data
    networks:
      - zdr_network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}

  # Queue Worker
  queue:
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        PHP_VERSION: 8.4
    container_name: zdr_queue
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./:/var/www
    environment:
      - APP_ENV=${APP_ENV:-local}
      - DB_HOST=db
      - REDIS_HOST=redis
      - QUEUE_CONNECTION=redis
    networks:
      - zdr_network
    depends_on:
      - app
      - redis
    command: php artisan queue:work --sleep=3 --tries=3 --max-time=3600

  # Scheduler (Cron)
  scheduler:
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        PHP_VERSION: 8.4
    container_name: zdr_scheduler
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./:/var/www
    environment:
      - APP_ENV=${APP_ENV:-local}
      - DB_HOST=db
      - REDIS_HOST=redis
    networks:
      - zdr_network
    depends_on:
      - app
    command: >
      sh -c "while true; do
        php artisan schedule:run --verbose --no-interaction &
        sleep 60
      done"

  # Node.js for Development (optional)
  node:
    image: node:20-alpine
    container_name: zdr_node
    working_dir: /var/www
    volumes:
      - ./:/var/www
    profiles:
      - dev
    networks:
      - zdr_network
    command: sh -c "npm install && npm run dev"

  # phpMyAdmin (optional)
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: zdr_phpmyadmin
    restart: unless-stopped
    ports:
      - "${PHPMYADMIN_PORT:-8080}:80"
    environment:
      PMA_HOST: db
      PMA_USER: ${DB_USERNAME:-zdr_user}
      PMA_PASSWORD: ${DB_PASSWORD:-zdr_password}
      UPLOAD_LIMIT: 64M
    networks:
      - zdr_network
    depends_on:
      - db
    profiles:
      - tools

  # Mailhog for Email Testing (optional)
  mailhog:
    image: mailhog/mailhog
    container_name: zdr_mailhog
    restart: unless-stopped
    ports:
      - "${MAILHOG_PORT:-8025}:8025"
      - "${MAILHOG_SMTP_PORT:-1025}:1025"
    networks:
      - zdr_network
    profiles:
      - dev

networks:
  zdr_network:
    driver: bridge

volumes:
  zdr_dbdata:
    driver: local
  zdr_redis:
    driver: local

